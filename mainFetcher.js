// Generated by CoffeeScript 1.4.0
(function() {
  var News, Status, async, bufferhelper, config, fs, getUrls, http, initHandler, main, mongoose, myUtil, path, urlFetch, urlParse, _;

  http = require('http');

  urlParse = (require('url')).parse;

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  _.str = require('underscore.string');

  mongoose = require('mongoose');

  async = require('async');

  bufferhelper = require('bufferhelper');

  myUtil = require('./util');

  config = require('./config');

  if (!(mongoose.connection.host != null)) {
    console.log("starting connect mongodb");
    mongoose.connect(config.mongourl);
    console.log("connect mongodb successful!");
  }

  require('./models/news');

  require('./models/status');

  News = mongoose.model('News');

  Status = mongoose.model('Status');

  exports.urlFetch = urlFetch = function(url, cb) {
    return http.get(urlParse(url), function(res) {
      var buffer;
      buffer = new bufferhelper();
      res.on('data', function(chunk) {
        return buffer.concat(chunk);
      });
      return res.on('end', function() {
        var html;
        html = buffer.toBuffer();
        return cb(html);
      });
    }).on('error', function(e) {
      return console.log(e);
    });
  };

  exports.getUrls = getUrls = function(url, format, cb) {
    return urlFetch(url, function(html) {
      var format_g, paths;
      html = html.toString();
      format_g = new RegExp(format, 'g');
      paths = html.match(format_g);
      return cb(paths);
    });
  };

  initHandler = function(mapper, getTitle, getContent, status, urls) {
    return function(paths) {
      var cmpValue;
      urls = _.map(paths, mapper);
      cmpValue = status.latest_cmp;
      urls = _.filter(urls, function(_arg) {
        var cv, url;
        url = _arg[0], cv = _arg[1];
        return cv > cmpValue;
      });
      if (!_.isEmpty(urls)) {
        console.log("filtered urls: " + urls.length);
        console.log(urls);
        return async.forEach(urls, function(item, callback) {
          var cv, url;
          url = item[0], cv = item[1];
          return urlFetch(url, function(html) {
            var content, news, title;
            title = getTitle(html);
            content = getContent(html);
            console.log("title: ", title, "&& url: ", url);
            if ((title != null) && (content != null)) {
              news = new News({
                original_url: url,
                cmp_value: cv,
                title: title,
                content: content,
                from_where: status.from_where
              });
              news.save();
            }
            return callback();
          });
        }, function(err) {
          var max_cmp_value;
          max_cmp_value = _.max(urls.map(function(_arg) {
            var cv, url;
            url = _arg[0], cv = _arg[1];
            return cv;
          }));
          status.latest_cmp = max_cmp_value;
          return status.save();
        });
      }
    };
  };

  exports.main = main = function() {
    var fetchers_dir;
    fetchers_dir = path.join(__dirname, 'fetchers');
    console.log('Status.find()');
    return Status.find({}, function(err, statuses) {
      var fetcher, getContent, getTitle, mapper, newsUrlFormat, status, url, urls, urlsHandler, _i, _len, _results;
      if (err) {
        console.log(err);
      }
      _results = [];
      for (_i = 0, _len = statuses.length; _i < _len; _i++) {
        status = statuses[_i];
        fetcher = require(path.join(fetchers_dir, status.from_where));
        urls = fetcher.urls, newsUrlFormat = fetcher.newsUrlFormat, mapper = fetcher.mapper, getTitle = fetcher.getTitle, getContent = fetcher.getContent;
        urlsHandler = initHandler(mapper, getTitle, getContent, status);
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {
            url = urls[_j];
            _results1.push(getUrls(url, newsUrlFormat, urlsHandler));
          }
          return _results1;
        })());
      }
      return _results;
    });
  };

  if (!(module.parent != null)) {
    console.log("main function...");
    main();
  }

}).call(this);
