// Generated by CoffeeScript 1.4.0
(function() {
  var News, Status, app, config, express, fs, model_files, models_path, mongoose, myUtil, path, _;

  express = require('express');

  mongoose = require('mongoose');

  path = require('path');

  fs = require('fs');

  _ = require('underscore');

  _.str = require('underscore.string');

  config = require('./config');

  myUtil = require('./util');

  mongoose.connect(config.mongourl);

  models_path = path.join(__dirname, 'models');

  model_files = fs.readdirSync(models_path);

  myUtil.uniqFilenames(model_files).forEach(function(file) {
    return require(path.join(models_path, file));
  });

  News = mongoose.model('News');

  Status = mongoose.model('Status');

  app = express();

  app.configure(function() {
    app.set('port', process.env.PORT || 3000);
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use(express.bodyParser());
    app.use(app.router);
    app.use(require('stylus').middleware(__dirname + '/public'));
    return app.use(express["static"](__dirname + '/public'));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.get('/api', function(req, res) {
    return Status.find({}, {
      from_where: 1
    }, function(err, statuses) {
      var fetchers;
      fetchers = statuses.map(function(status) {
        var fetcher;
        return fetcher = _.str.strLeft(status.from_where, '.');
      });
      return res.render('api', {
        fetchers: fetchers
      });
    });
  });

  app.get('/api/startfetch', function(req, res) {
    return require('./mainFetcher').main();
  });

  app.get('/api/:subdomain/:limit', function(req, res) {
    var from_where, limit;
    from_where = req.params.subdomain + '.scu.edu.cn';
    limit = parseInt(req.params.limit);
    return News.find({
      from_where: from_where
    }).sort('-cmp_value').limit(limit).execFind(function(err, newses) {
      return res.json(newses);
    });
  });

  app.listen(app.get('port'), function() {
    return console.log("Express server is listening...");
  });

}).call(this);
